
SELECT location, date, total_cases, new_cases, total_deaths, population
FROM deaths
ORDER BY 1,2;

-- total cases vs total deaths
-- Shows the likelihood of dying if you contract COVID in the US

SELECT location, date, total_cases, total_deaths, (CAST(total_deaths  AS DOUBLE)/CAST( total_cases AS DOUBLE) )* 100 AS death_percentage
FROM deaths
WHERE location LIKE '%states%'
ORDER BY 1,2;

-- total cases vs population
-- Shows what percentage of the US population has contracted covid at some point in time.
SELECT location, date, population, total_cases, (CAST(total_cases  AS DOUBLE)/CAST( population AS DOUBLE) )* 100 AS infected_percentage
FROM deaths
WHERE location LIKE '%states%'
ORDER BY 1,2;


-- Showing countries with highest infection rate compared to population
SELECT location, population, MAX(total_cases) AS highest_infection_count, MAX(CAST(total_cases  AS DOUBLE)/CAST( population AS DOUBLE) * 100) AS highest_infected_percentage
FROM deaths
WHERE continent IS NOT NULL
GROUP BY location, population
ORDER BY highest_infected_percentage DESC;

-- Showing countries with highest death count recorded in a single day
SELECT location, MAX(CAST(total_deaths AS INT)) as highest_death_count
FROM deaths
WHERE continent IS NOT NULL
GROUP BY location
ORDER BY highest_death_count DESC;

-- Showing regions with highest death count recorded in a single day
SELECT location, MAX(CAST(total_deaths AS INT)) as highest_death_count
FROM deaths
WHERE continent IS  NULL
GROUP BY location
ORDER BY highest_death_count DESC;

-- Global numbers
SELECT date, SUM(CAST(new_cases AS INT))AS total_cases, SUM(CAST(new_deaths AS INT)) AS total_deaths, SUM(CAST(new_deaths AS FLOAT)/total_cases*100) AS death_percentage
FROM deaths
WHERE continent IS  NOT NULL
GROUP BY date
ORDER BY 1,2;

-- total population vs vaccinations
SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccinations.new_vaccinations,
				 SUM(CAST(vaccinations.new_vaccinations AS INT)) 
				 OVER (PARTITION BY deaths.location
								ORDER BY deaths.location, deaths.DATE)
				 AS rolling_people_vac
FROM deaths
JOIN vaccinations
ON deaths.location = vaccinations.location AND deaths.date = vaccinations.date
WHERE deaths.continent IS NOT NULL
ORDER BY 2,3;

-- use UCT because we cannot use a column we just created
WITH pop_vs_vac(continent, location, date, population, new_vaccinations, rolling_people_vac)
AS (
		SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccinations.new_vaccinations,
				 SUM(CAST(vaccinations.new_vaccinations AS INT)) 
				 OVER (PARTITION BY deaths.location
								ORDER BY deaths.location, deaths.DATE)
				 AS rolling_people_vac
		FROM deaths
		JOIN vaccinations
		ON deaths.location = vaccinations.location AND deaths.date = vaccinations.date
		WHERE deaths.continent IS NOT NULL
);
SELECT *, (CAST(rolling_people_vac AS DOUBLE)/CAST(population AS DOUBLE))*100 as rolling_percentage_vaccinated
FROM pop_vs_vac;

-- OR use temp TABLE
CREATE TABLE percent_population_vaccinated(
	continent VARCHAR(255),
	location VARCHAR(255),
	date DATE ,
	population NUMERIC,
	new_vaccinations NUMERIC,
	rolling_people_vac NUMERIC
);

INSERT INTO percent_population_vaccinated
SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccinations.new_vaccinations,
				 SUM(CAST(vaccinations.new_vaccinations AS INT)) 
				 OVER (PARTITION BY deaths.location
								ORDER BY deaths.location, deaths.DATE)
				 AS rolling_people_vac
		FROM deaths
		JOIN vaccinations
				ON deaths.location = vaccinations.location AND deaths.date = vaccinations.date
		WHERE deaths.continent IS NOT NULL; 
		
SELECT *, (CAST(rolling_people_vac AS DOUBLE)/CAST(population AS DOUBLE))*100 as rolling_percentage_vaccinated
FROM percent_population_vaccinated;

DROP TABLE percent_population_vaccinated;

-- Creating view to store data for later visualization
-- a view is a virtual table that are like real tables
CREATE VIEW percent_population_vaccinated AS
SELECT deaths.continent, deaths.location, deaths.date, deaths.population, vaccinations.new_vaccinations,
				 SUM(CAST(vaccinations.new_vaccinations AS INT)) 
				 OVER (PARTITION BY deaths.location
								ORDER BY deaths.location, deaths.DATE)
				 AS rolling_people_vac
FROM deaths
JOIN vaccinations
		ON deaths.location = vaccinations.location AND deaths.date = vaccinations.date
WHERE deaths.continent IS NOT NULL; 



</sql><current_tab id="0"/></tab_sql></sqlb_project>
